from ..mission import *
[% var componentLookup = new Map(); %]
[% var EObjectLookup = new Map(); %]

class MissionLoader:
	def loadMission(self):
	[% for (m in M!Mission.allInstances()) { %]
	[% 	var robotNum = 0; 
		var serverNum = 0; %]	
		self.mission = Mission()
	[* Initilize Servers *]	
	[% for (s in m.servers) { %]
		# Initilize Server: [%= s.name %]
	[% var serverName = "s" + serverNum++;	%]
		[%= serverName %] = Server("[%= s.name %]")
	[% componentLookup.put(s, serverName); %]
		self.mission.addServer("[%= s.ID %]")
	[% } %]
	[* Initilize Robots and subcomponents *]
	[% for (r in m.robots) { %]
		# Initilize Robot: [%= r.name %]
		[% componentLookup.put(r, r.ID); %]
		robot_[%= r.ID %] = Robot("[%= r.name %]")
		[% for (p in r.componentProperties) { %]
			[% if (p.isKindOf(IntProperty)) { %]
		robot_[%= r.ID %].setIntComponentProperty("[%= p.name %]", [%= p.value %])
			[% } %]
			[% if (p.isKindOf(DoubleProperty)) { %]
		robot_[%= r.ID %].setDoubleComponentProperty("[%= p.name %]", [%= p.value %])
			[% } %]
			[% if (p.isKindOf(StringProperty)) { %]
		robot_[%= r.ID %].setStringComponentProperty("[%= p.name %]", "[%= p.value %]")
			[% } %]
		[% } %]	
		[% var subCNum = 0; %]
		# Initilize Robot: [%= r.name %]'s subcomponents
		[% for (subc in r.subcomponents) { %]
			[% componentLookup.put(subc, subc.ID); %]
			[% if (subc.isKindOf(Sensor)) { %]
		sensor_[%= subc.ID %] = Sensor("[%= subc.type %]")
		sensor_[%= subc.ID %].setParent(robot_[%= r.ID %])
				[% for (sp in subc.componentProperties) { %]
					[% if (sp.isKindOf(IntProperty)) { %]
		[%= subID %].setIntComponentProperty("[%= sp.name %]", [%= sp.value %])
					[% } %]
					[% if (sp.isKindOf(DoubleProperty)) { %]
		[%= subID %].setDoubleComponentProperty("[%= sp.name %]", [%= sp.value %])
					[% } %]
				[% } %]
		robot_[%= r.ID %].addSubcomponent("[%= subc.ID %]", sensor_[%= subc.ID %])
			[% } %]
			[% if (subc.isKindOf(MotionSource)) { %]
		motion_source_[%= subc.ID %] = MotionSource()
		robot_[%= r.ID %].addSubcomponent("[%= subc.ID %]", motion_source_[%= subc.ID %])
			[% } %]
			[% if (subc.isKindOf(Battery)) { %]
		battery_[%= subc.ID %] = Battery()
		robot_[%= r.ID %].addSubcomponent("[%= subc.ID %]", battery_[%= subc.ID %])
			[% } %]
		[% if (subc.isKindOf(CPU)) { %]
		cpu_[%= subc.ID %] = CPU()
		robot_[%= r.ID %].addSubcomponent("[%= subc.ID %]", cpu_[%= subc.ID %])
			[% } %]	
		[% } %]
		self.mission.addRobot("[%= r.ID %]", robot_[%= r.ID %])
	[% } %]
	
	[* Initilize Goals *]
	[% var goalnum = 0; %]
	[% for (g in m.goals) { %]
		# Initilize Goal: [%= g.name %]
		[% goalnum++; %]
		[% var goalName = g.name; %]
		members = []
			[% for (robot in g.members.goalMembers) { %]
		members.append(self.mission.robots.get("[%= robot.ID %]"))
			[% } %]
		goal_members_[%= g.ID %] = GoalMembers(members, self.mission)		
		[% var goalDep = g.dependentGoals; %]
		g_deps = []
		[% if (goalDep.size() > 1) { %]
		[% for (goal in goalDep.dependencies) { %]
		g_deps.append(self.mission.goals.get("[%= goal.ID %]"))
			[% } %]
		goal_dependecies_[%= g.ID %] = GoalDependencies([%= goalDep.earliestStartTime %], [%= goalDep.latestFinishTime %], g_deps)
		[% } else { %]
		goal_dependecies_[%= g.ID %] = []	
		[% } %]
		[* Goal Tasks *]
		[% var goalTask = g.task; %]
		[% if (goalTask.isKindOf(GatherSamples)) { %]
		s = self.mission.sensors.get("[%= goalTask.sensor.ID %]")
		goal_task_[%= g.ID %] = GatherSamples([%= goalTask.samplesPerSecond %], [%= goalTask.targetSampleNumber %], s)
		[% } %]
		[% if (goalTask.isKindOf(AvoidCollision)) { %]
		rbts = []
		obs = []
		[% for (r in goalTask.robots) { %]
		rbts.append(self.mission.robots.get("[%= r.ID %]"))
		[% } %]
		[% for (o in goalTask.obstacles) { %]
		obs.append(self.mission.obstacles.get("[%= o.ID %]"))
		[% } %]
		goal_task_[%= g.ID %] = AvoidCollision(rbts, obs)
		[% } %]
		[% if (goalTask.isKindOf(FixedDistanceBetweenRobots)) { %]
		goal_task_[%= g.ID %] = FixedDistance([%= goalTask.fixedDistance %])
		[% } %]
		[% if (goalTask.isKindOf(Patrol)) { %]
		goal_task_[%= g.ID %] = Patrol()
		[% } %]
		[% if (goalTask.isKindOf(Visit)) { %]
		goal_task_[%= g.ID %] = Visit()
		[% } %]
		[% if (goalTask.isKindOf(Track)) { %]
		goal_task_[%= g.ID %] = Track()
		[% } %]
		[% if (goalTask.isKindOf(Stay)) { %]
		goal_task_[%= g.ID %] = Stay()
		[% } %]
		[% if (goalTask.isKindOf(SufficientEnergy)) { %]
		goal_task_[%= g.ID %] = SufficientEnergy()
		[% } %]
		[% var goalArea = g.area; %]
		[% var ga = goalArea.goalArea; %]
		goal_area_[%= g.ID %] = GoalArea(Area(Coordinate([%= ga.center.x %], [%= ga.center.y %], [%= ga.center.z %]), [%= ga.radius %]))

		[* Initilize Messages *]
		goal_messages = []
		[% for (msg in g.messages) { %]
		[% if (msg.from.isKindOf(Robot)) { %]
		sender = self.mission.robots.get("[%= msg.from.ID %]")
		[% } else { %]
		sender = self.mission.servers.get("[%= msg.from.ID %]")
		[% } %]
		[% if (msg.to.isKindOf(Robot)) { %]
		receiver = self.mission.robots.get("[%= msg.to.ID %]")
		[% } else { %]
		receiver = self.mission.servers.get("[%= msg.to.ID %]")
		[% } %]
		data = []
		[% for (data in msg.body) {%]
		data.append(["[%= data.name %]", "[%= data.type %]"])
		[% } %]
		msg_[%= msg.ID %] = Message("[%= msg.header %]", sender, receiver, data)
		goal_messages.append(msg_[%= msg.ID %]) 
		[% } %]
		goal_[%= g.ID %] = Goal("[%= g.name %]", self.mission, goal_dependecies_[%= g.ID %], goal_members_[%= g.ID %], goal_area_[%= g.ID %], goal_task_[%= g.ID %], goal_messages)
		self.mission.addGoal("[%= g.ID %]", goal_[%= g.ID %])
		
	[% } %]
	[% } %]
		return self.mission