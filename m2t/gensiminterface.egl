from dsl.mission.Coordinates import Coordinates
import roslibpy
from threading import Thread
from gen.MRS import MRS
import time

class SimInterface(Thread):
    
    topics = {}
    mission = None
    flag = True
	
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
    
    def MRS_init(self):
        # Setup MRS
        print("--------------------------\nInitilising and starting MRS\n--------------------------")
        self.mrs = MRS()
        self.mrs.daemon = True
        self.mrs.start()
        
    def reset(self):
        print("Thread 1 reset...")
        self.topics.clear()
     
    def kill(self):
    	print("Thread 1 killed...")
    	self.flag = False
                  
    def run(self):
    
        self.client = roslibpy.Ros(host='localhost', port=9090)
        self.client.run()
        [% for (mission in Mission.all) { %]
            [% for (robot in mission.robots) { %]
            
        #--------------------------------- Robot [%= robot.name %] Topics ---------------------------------#
                [% for (cp in robot.intProperties) { %]
        [%= robot.ID %]_[%= cp.name %] = roslibpy.Topic(self.client, '/[%= robot.ID %]_[%= cp.name %]', 'std_msgs/String')
        [%= robot.ID %]_[%= cp.name %].subscribe(lambda message: self.assign_to_topic('[%= robot.ID %]_[%= cp.name %]', message))
        [* self.topics.add("[%= robot.ID %]_[%= cp.name %]", [%= robot.ID %]_[%= cp.name %]) *]
                [% } %]
                [% for (cp in robot.doubleProperties) { %]
        [%= robot.ID %]_[%= cp.name %] = roslibpy.Topic(self.client, '/[%= robot.ID %]_[%= cp.name %]', 'std_msgs/String')
        [%= robot.ID %]_[%= cp.name %].subscribe(lambda message: self.assign_to_topic('[%= robot.ID %]_[%= cp.name %]', message))
        [* self.topics.add("[%= robot.ID %]_[%= cp.name %]", [%= robot.ID %]_[%= cp.name %]) *]
                [% } %]
                [% for (cp in robot.stringProperties) { %]
        [%= robot.ID %]_[%= cp.name %] = roslibpy.Topic(self.client, '/[%= robot.ID %]_[%= cp.name %]', 'std_msgs/String')
        [%= robot.ID %]_[%= cp.name %].subscribe(lambda message: self.assign_to_topic('[%= robot.ID %]_[%= cp.name %]', message))
        [* self.topics.add("[%= robot.ID %]_[%= cp.name %]", [%= robot.ID %]_[%= cp.name %]) *]
                [% } %]
        [%= robot.ID %]_POSITION = roslibpy.Topic(self.client, '/[%= robot.ID %]_POSITION', 'std_msgs/String')
        [%= robot.ID %]_POSITION.subscribe(lambda message: self.assign_to_topic('[%= robot.ID %]_POSITION', message))
        [%= robot.ID %]_SPEED = roslibpy.Topic(self.client, '/[%= robot.ID %]_SPEED', 'std_msgs/String')
        [%= robot.ID %]_SPEED.subscribe(lambda message: self.assign_to_topic('[%= robot.ID %]_SPEED', message))
        [%= robot.ID %]_ENERGY = roslibpy.Topic(self.client, '/[%= robot.ID %]_ENERGY', 'std_msgs/String')
        [%= robot.ID %]_ENERGY.subscribe(lambda message: self.assign_to_topic('[%= robot.ID %]_ENERGY', message))
        [* self.topics.add("[%= robot.ID %]_POSITION", [%= robot.ID %]_POSITION) *]
                [% for (s in robot.sensors) { %]
        [%= s.ID %]_[%= s.type %] = roslibpy.Topic(self.client, '/[%= s.ID %]_[%= s.type %]', 'std_msgs/String')
        [%= s.ID %]_[%= s.type %].subscribe(lambda message: self.assign_to_topic('[%= s.ID %]_[%= s.type %]', message))
        [* self.topics.add("[%= sc.ID %]_[%= sc.type %]", [%= sc.ID %]_[%= sc.type %]) *]
                [% } %]
			[% } %]
        [% } %]
        try:
            while self.flag:
                pass
        except KeyboardInterrupt:
            self.client.terminate()
            
    def assign_to_topic(self, topic_name, msg):
        self.topics[topic_name] = msg

    def get_sensor_sample(self, sensor):
        if sensor.ID + "_" + sensor.sensor_type in self.topics.keys():
            sample = self.topics[sensor.ID + "_" + sensor.sensor_type]["data"]
            return int(sample)
        else:
            return 0

    def get_POSITION(self, robot):
        if robot.ID + "_" + "POSITION" in self.topics.keys():
            position = self.topics[robot.ID + "_" + "POSITION"]["data"]
            position = position.split(',')
            return Coordinates(int(position[0]), int(position[1]), int(position[2]))
        else:
            return robot.position
    
    def get_SPEED(self, robot):
        if robot.ID + "_" + "SPEED" in self.topics.keys():
            position = self.topics[robot.ID + "_" + "SPEED"]["data"]
            return int(position)
        else:
            return robot.speed
        
    def get_ENERGY(self, robot):
        if robot.ID + "_" + "ENERGY" in self.topics.keys():
            energy = self.topics[robot.ID + "_" + "ENERGY"]["data"]
            return float(energy)
        else: 
            return robot.current_energy
        
    [*[% var properties = new List(); %]
        [% for (mission in M!Mission.allInstances()) { %]
            [% for (robot in mission.robots) { %]
                [% for (cp in robot.componentProperties) { %]
                    [% if (properties.excludes(cp.name)) { %]
    def get_[%= cp.name %](self, robot):
        # topic = self.find_topic(robot.ID, "[%= cp.name %]")
        # sample = topic.subscribe(lambda message: message['data'])
        if robot.ID + "_" + "[%= cp.name %] in self.topics.keys():
        	property = self.topics[robot.ID + "_" + "[%= cp.name %]"]["data"]
        	return property
        else:
        	return ""	
                    [% } %]
                [% } %]      
            [% } %]
        [% } %]*]
    def update_robot_speed(self, robot, new_speed):
        self.mission.robots[robot.ID].speed = new_speed

    def stop(self):
        self.client.terminate()   