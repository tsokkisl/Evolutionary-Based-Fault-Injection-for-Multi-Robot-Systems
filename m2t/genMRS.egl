[% var componentLookup = new Map(); %]
[% var EObjectLookup = new Map(); %]
from dsl.mission.Battery import Battery
from dsl.mission.Robot import Robot
from dsl.mission.Coordinates import Coordinates
from dsl.mission.Sensor import Sensor
from dsl.mission.MotionSource import MotionSource
import roslibpy
from threading import Thread

class MRS(Thread):
	
	robots = {}
	topics = {}
	
	def __init__(self, *args, **kwargs):
		super().__init__(*args, **kwargs)
		self.initialize_robots()
	
	def initialize_robots(self):	
    [% for (mission in Mission.all) { %]
	[* Initilize Robots and subcomponents *]
	[% for (r in mission.robots) { %]
		# Initilize Robot: [%= r.name %]
		subcomponents = []
		[% var subCNum = 0; %]
		# Initilize Robot: [%= r.name %]'s subcomponents
		[% for (s in r.sensors) { %]
		sensor_[%= s.ID %] = Sensor("[%= s.ID %]", "[%= s.parentID %]", "[%= s.type %]", [%= s.energyPerSample %], [%= s.samplesPerSecond %])
		subcomponents.append(sensor_[%= s.ID %])
		[% } %]
		[% for (ms in r.motionSources) { %]
		motion_source_[%= ms.ID %] = MotionSource("[%= ms.ID %]", [%= ms.energyPerDistanceUnit %])
		subcomponents.append(motion_source_[%= ms.ID %])
		[% } %]
		[% for (b in r.batteries) { %]
		battery_[%= b.ID %] = Battery("[%= b.ID %]", [%= b.totalEnergy %])
		subcomponents.append(battery_[%= b.ID %])
		[% } %]
		robot_[%= r.ID %] = Robot("[%= r.ID %]", "[%= r.name %]", [%= r.speed %], Coordinates([%= r.position.x %], [%= r.position.y %], [%= r.position.z %]), subcomponents)
		[% for (p in r.intProperties) { %]
		robot_[%= r.ID %].set_int_component_property("[%= p.name %]", [%= p.value %])
		[% } %]
		[% for (p in r.doubleProperties) { %]
		robot_[%= r.ID %].set_double_component_property("[%= p.name %]", [%= p.value %])
		[% } %]
		[% for (p in r.stringProperties) { %]
		robot_[%= r.ID %].set_string_component_property("[%= p.name %]", "[%= p.value %]")
		[% } %]
		robot_[%= r.ID %].configure_robot()
		self.robots["[%= r.ID %]"] = robot_[%= r.ID %]
		
	[% } %]
	[% } %]
	
	def run(self):
		self.client = roslibpy.Ros(host='localhost', port=9090)
		self.client.run()
		[% for (mission in Mission.all) { %]
			[% for (robot in mission.robots) { %]
					
		#--------------------------------- Robot [%= robot.name %] Topics ---------------------------------#
			[% for (cp in robot.intProperties) { %]
		[%= robot.ID %]_[%= cp.name %] = roslibpy.Topic(self.client, '/[%= robot.ID %]_[%= cp.name %]', 'std_msgs/String')
		self.topics["[%= robot.ID %]_[%= cp.name %]"] = [%= robot.ID %]_[%= cp.name %]
			[% } %]
			[% for (cp in robot.doubleProperties) { %]
		[%= robot.ID %]_[%= cp.name %] = roslibpy.Topic(self.client, '/[%= robot.ID %]_[%= cp.name %]', 'std_msgs/String')
		self.topics["[%= robot.ID %]_[%= cp.name %]"] = [%= robot.ID %]_[%= cp.name %]
			[% } %]
			[% for (cp in robot.stringProperties) { %]
		[%= robot.ID %]_[%= cp.name %] = roslibpy.Topic(self.client, '/[%= robot.ID %]_[%= cp.name %]', 'std_msgs/String')
		self.topics["[%= robot.ID %]_[%= cp.name %]"] = [%= robot.ID %]_[%= cp.name %]
			[% } %]
		[%= robot.ID %]_POSITION = roslibpy.Topic(self.client, '/[%= robot.ID %]_POSITION', 'std_msgs/String')
		self.topics["[%= robot.ID %]_POSITION"] = [%= robot.ID %]_POSITION
		[%= robot.ID %]_SPEED = roslibpy.Topic(self.client, '/[%= robot.ID %]_SPEED', 'std_msgs/String')
		self.topics["[%= robot.ID %]_SPEED"] = [%= robot.ID %]_SPEED
		[%= robot.ID %]_ENERGY = roslibpy.Topic(self.client, '/[%= robot.ID %]_ENERGY', 'std_msgs/String')
		self.topics["[%= robot.ID %]_ENERGY"] = [%= robot.ID %]_ENERGY
			[% for (s in robot.sensors) { %]
		[%= s.ID %]_[%= s.type %] = roslibpy.Topic(self.client, '/[%= s.ID %]_[%= s.type %]', 'std_msgs/String')
		self.topics["[%= s.ID %]_[%= s.type %]"] = [%= s.ID %]_[%= s.type %]
			[% } %]
			[% } %]
		[% } %]	

		while self.client.is_connected:
			for robot in self.robots.values():
				robot.move()
		[% for (mission in Mission.all) { %]
			[% for (robot in mission.robots) { %]
			#--------------------------------- Publish data of Robot [%= robot.name %] ---------------------------------#
				[% for (cp in robot.intProperties) { %]
			[%= robot.ID %]_[%= cp.name %].publish(roslibpy.Message({'data': 'data'}))
				[% } %]
				[% for (cp in robot.doubleProperties) { %]
			[%= robot.ID %]_[%= cp.name %].publish(roslibpy.Message({'data': 'data'}))
				[% } %]
				[% for (cp in robot.stringProperties) { %]
			[%= robot.ID %]_[%= cp.name %].publish(roslibpy.Message({'data': 'data'}))
				[% } %]
			[%= robot.ID %]_POSITION.publish(roslibpy.Message({'data': str(self.robots["[%= robot.ID %]"].position.x) + ',' + str(self.robots["[%= robot.ID %]"].position.y) + ',' + 
			str(self.robots["[%= robot.ID %]"].position.z)}))
			[%= robot.ID %]_SPEED.publish(roslibpy.Message({'data': str(self.robots["[%= robot.ID %]"].speed)}))
			[%= robot.ID %]_ENERGY.publish(roslibpy.Message({'data': str(self.robots["[%= robot.ID %]"].current_energy)}))
				[% for (s in robot.sensors) { %]	
			[%= s.ID %]_[%= s.type %].publish(roslibpy.Message({'data': str(self.robots["[%= s.parentID %]"].subcomponents["[%= s.ID %]"].generate_samples())}))
				[% } %]		
			[% } %]
		[% } %]
				
		for topic in self.topics.values():
			topic.unadvertise()
			
	def stop(self):
		self.client.terminate()
	
	def reset(self):
		self.reset_robots()
	
	def kill(self):
		print("Thread 2 killed...")
		self.stop()