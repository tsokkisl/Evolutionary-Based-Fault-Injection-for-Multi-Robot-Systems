from gen.mission_loader import MissionLoader
from gen.sim_interface import SimInterface
import random
import time
from dsl.mission.Sensor import Sensor

class CI:
	
    total_goal_violations = [] 
    goal_violations_per_fault = {}
    goals_last_violation_state = {}
    time = 0
    
    def __init__(self):
        self.mission = MissionLoader().load_mission()
        # Setup Sim Interface
        print("--------------- Initilizing and starting sim interface ---------------\n")
        self.sim_interface = SimInterface()
        self.sim_interface.daemon = True
        self.sim_interface.start()
        time.sleep(2)

    def reset_system_state(self, fs):
        self.mission = MissionLoader().load_mission()
        self.fault_specification = fs
        self.sim_interface.mission = self.mission
        self.total_goal_violations = [0 for _ in range(self.mission.duration)]
        self.goal_violations_per_fault = {}
        self.goals_last_violation_state = {"g1": False, "g2": False, "g3": False, "g4": False, "g5": False, "g6": False}
        self.time = 0

    def update_goal_violations(self, gid):
        self.total_goal_violations[self.time] += 1
        if gid in self.goal_violations_per_fault.keys():
            self.goal_violations_per_fault[gid] += 1
        else:
            self.goal_violations_per_fault[gid] = 1

    def update_system_state(self):
        """ Update mission state """
        for robot in self.mission.robots.values():
            robot.update_position(self.sim_interface.get_POSITION(robot))
            robot.update_energy(self.sim_interface.get_ENERGY(robot))
            robot.update_speed(self.sim_interface.get_SPEED(robot))
            for sc in robot.subcomponents.values():
                if isinstance(sc, Sensor) and sc.state == "Active":
                    sample = self.sim_interface.get_sensor_sample(sc)
                    sc.samples.append(sample)
            """print('time={6}, position = [{0}, {1}, {2}], speed={3}, energy={4}, direction={5}'.format(robot.position.x, robot.position.y, 
            robot.position.z, robot.speed, robot.current_energy, robot.direction, self.time))
            print('--------------------------------')"""

    def execute_faults(self):
        """ Check for fault """
        for fault in self.fault_specification:
            fault.exec_fault(self.time, self.sim_interface.mission, self.sim_interface.mrs)
            	
    def runCI(self, fs):
        fitness = 0
        self.reset_system_state(fs)
        # Run simulation
        for t in range(self.mission.duration):
            self.update_system_state()
            self.execute_faults()
        [% for (m in Mission.all) { %]
            [% for (g in m.goals) { %]
            [% if (g.task.gatherSamples != null) { %]
            self.check_[%= g.name.ftlc() %]_[%= g.ID %]()
            [% } %]
            [% else { %]
            self.check_[%= g.name.ftlc() %]()
            [% } %]
            [% } %]
        [% } %]
            t += 1
            self.time = t
            #time.sleep(1)
            self.goals_last_violation_state = {"g1": False, "g2": False, "g3": False, "g4": False, "g5": False, "g6": False}
        with open('metrics.txt', 'a') as f:
            f.write(str(self.goal_violations_per_fault) + '\n')
            f.close()
        #print(self.goal_violations_per_fault)
        #print(self.total_goal_violations)
        for v in self.total_goal_violations: fitness += v
        return fitness + (len(self.total_goal_violations) * 10000)
        
    def check_for_collision(self, p1, p2, r1, r2):
        return (p1[0] - r1 < p2[0] + r2 and p1[0] + r1 > p2[0] - r2 and p1[1] + r1 > p2[1] - r2 and p1[1] - r1 < p2[1] + r2)
                    
    [% for (m in Mission.all) { %]
        [% for (g in m.goals) { %]
        	[% if (g.task.gatherSamples != null) { %]
    def check_[%= g.name.ftlc() %]_[%= g.ID %](self):
        [%= out.startPreserve("#", "", "User implemented method", true) %]
        goal_ID = "[%= g.ID %]"
        sensor = self.sim_interface.mission.goals[goal_ID].goalTask.sensor
        [% var dependencies = ""; %]
        [% for (d in g.dependentGoals) { %]
        	[% dependencies += g.name+ '_' + g.ID + ' '; %]
        [% } %]
        """ Dependencies: [%= dependencies %] """
        """ Check if goal is violated and make a decision """
		[%= out.stopPreserve() %]
        	[% } %]
        	[% else { %]
    def check_[%= g.name.ftlc() %](self):
        [%= out.startPreserve("#", "", "User implemented method", true) %]
        goal_ID = "[%= g.ID %]"
        [% var dependencies = ""; %]
        [% for (d in g.dependentGoals) { %]
        	[% dependencies += g.name+ '_' + g.ID + ' '; %]
        [% } %]
        """ Dependencies: [%= dependencies %] """
        """ Check if goal is violated and make a decision """
		[%= out.stopPreserve() %]
        	[% } %]
        [% } %]
    [% } %]
    
    """
    def print_mission_and_fault_specification(self):
        self.reset_system_state(FaultSpecification(MissionLoader().load_mission()))
        # Setup mission specification
        print("Mission Specification")
        print(self.mission.name)
        print(self.mission.duration)
        print(self.mission.mission_area)
        print(self.mission.robots)
        print(self.mission.servers)
        print(self.mission.obstacles)
        print(self.mission.goals)

        print("\nFault Specification")
        print(self.fault_specification.faults)
        pop = self.fault_specification.generate_population()
        for i in range(len(pop)):
            s = ""
            print("INDIVIDUAL: " + str(i))
            for k in pop[i]:
                s += k.type.message.ID + "(" + str(k.start) + ", " + str(k.finish)+ ") "
            print(s)
            print("---------------------------------\n")
     """