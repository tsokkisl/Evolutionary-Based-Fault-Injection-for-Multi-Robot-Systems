@namespace(uri="acs_project_mission", prefix="")

package project;

/* This DSL is used for defining the specification
* of the mission which is going to be executed by the MRS 
* including robots, goals, environment, constrains etc.
*/

/* Mission Environment */

class Coordinates {
	attr int x;
	attr int y;
	attr int z;
}

class Area {
	attr String ID;
	attr int radius;
	val Coordinates center;
}

class Obstacle {
	attr String ID;
	val Area area;
}

/* Components Specification */

class IntProperty {
	attr String name;
	attr int value;
}

class StringProperty {
	attr String name;
	attr String value;	
}

class DoubleProperty {
	attr String name;
	attr Double value;	
}

class Robot {
	attr String name;
	attr String ID;
	attr int speed;
	val Coordinates position;
	val IntProperty[*] intProperties;
	val StringProperty[*] stringProperties;
	val DoubleProperty[*] doubleProperties;
	val Sensor[*] sensors;
	val Battery[*] batteries;
	val MotionSource[*] motionSources;
}

class Server {
	attr String name;
	attr String ID;
	val IntProperty[*] intProperties;
	val StringProperty[*] stringProperties;
	val DoubleProperty[*] doubleProperties;
}

enum SensorType {
 	GPS_POSITION = 1;
	DEPTH = 2;
	TEMPERATURE = 3;
	PRESSURE = 4;
}

class Sensor {
	attr String name;
	attr String ID;
	attr String parentID;
 	attr Double energyPerSample;
	attr int samplesPerSecond;
	attr SensorType type;
}

class MotionSource {
	attr String name;
	attr String ID;
	attr String parentID;
 	attr Double energyPerDistanceUnit;
}

class Battery {
	attr String name;
	attr String ID;
	attr String parentID;
 	attr Double totalEnergy;
}

/* Mission messages */

class MessageData {
	attr String name;
	attr String type;
}

class Message {
	attr String ID;
	attr String goal_ID;
	ref Robot[1] from;
	ref Server[1] to;
	attr String header;
	val MessageData[*] body;
}

/* Goals */

class GoalMembers {
	ref Robot[*] goalMembers;
}

class GoalDependencies {
	ref Goal[*] dependencies;
}

class GoalArea {
	val Area goalArea;
}

class Patrol {
	val Area area;
}

class Visit {
	val Coordinates coordinates;
}

class Track {
	val Coordinates[*] trajectory;
}

class Stay {
	val Area area;
}

class AvoidCollision {
	ref Robot[*] robots;
	ref Obstacle[*] obstacles;
}

class FixedDistanceBetweenRobots {
	attr int fixedDistance;
}

class StayWithinMissionArea {
	
}

class GatherSamples {
	attr int targetSampleNumber;
	ref Sensor sensor;
}

class SufficientEnergy {
	
}

class GoalTask {
	val Patrol[0..1] patrol;
	val Visit[0..1] visit;
	val Track[0..1] track;
	val Stay[0..1] stay;
	val AvoidCollision[0..1] avoidCollision;
	val FixedDistanceBetweenRobots[0..1] fixedDistanceBetweenRobots;
	val GatherSamples[0..1] gatherSamples;
	val SufficientEnergy[0..1] sufficientEnergy;
	val StayWithinMissionArea[0..1] stayWithinMissionArea;
}

class Goal {
	attr String ID;
	attr String name;
	val GoalMembers members;
	val GoalDependencies dependentGoals;
	val GoalArea[0..1] area;
	val GoalTask task;
	val Message[*] messages;
}

/* Mission definition */

class Mission {
	attr String name;
	attr Double duration;
	val Robot[*] robots;
	val Server[*] servers;	
	val Goal[*] goals;
	val Obstacle[*] obstacles;
	val Area missionArea;
}

