@namespace(uri="project-mission", prefix="")

package project;

/* This DSL is responsible for defining the specification
* of the mission which is going to be executed by the MRS 
* including robots, goals, environment, constrains etc.
*/

/* Mission Environment */

class Coordinate {
	attr int x;
	attr int y;
	attr int z;
}

class Area {
	attr String ID;
	attr int radius;
	val Coordinate center;
}

class Obstacle {
	attr String ID;
	val Area area;
}

/* Components Specification */

abstract class CProperty {
	attr String name;
}

class IntProperty extends CProperty {
	attr int value;
}

class StringProperty extends CProperty {
	attr String value;	
}

class DoubleProperty extends CProperty {
	attr Double value;	
}

abstract class Component {
	attr String name;
	attr String ID;
	val CProperty[*] componentProperties;
}

class MainComponent extends Component {	
	val Component[*] subcomponents;
}

class Robot extends MainComponent {
	val Coordinate position;
}

class Server extends MainComponent {

}

class SubComponent extends Component {
	attr String parent_ID;
}

enum SensorType {
 	GPS_POSITION = 1;
	DEPTH = 2;
	TEMPERATURE = 3;
	PRESSURE = 4;
}

class Sensor extends SubComponent {
 	attr SensorType type;
}

class CPU extends SubComponent {
	attr String model;
}

class MotionSource extends SubComponent {
 	attr double energyPerDistanceUnit;
}

class Battery extends SubComponent {
 	attr int totalEnergy; 
}

class EnergySource extends SubComponent {
 	attr int productionRate;
}

/* Mission messages */

class MessageData {
	attr String name;
	attr String type;
}

class Message {
	attr String ID;
	attr String goal_ID;
	ref Component[1] from;
	ref Component[1] to;
	attr String header;
	val MessageData[*] body;
}

/* Goals */

class GoalMembers {
	ref Robot[*] goalMembers;
}

class GoalDependencies {
	ref Goal[*] dependencies;
	attr double earliestStartTime;
	attr double latestFinishTime;
}

class GoalArea {
	val Area goalArea;
}

abstract class GoalTask {
	
}

class Patrol extends GoalTask {
	
}

class Visit extends GoalTask {
	
}

class Track extends GoalTask {
	
}

class Stay extends GoalTask {

}

class AvoidCollision extends GoalTask {
	ref Robot[*] robots;
	ref Obstacle[*] obstacles;
}

class FixedDistanceBetweenRobots extends GoalTask {
	attr int fixedDistance;
}

class GatherSamples extends GoalTask {
	attr int samplesPerSecond;
	attr int targetSampleNumber;
	ref Sensor sensor;
}

class SufficientEnergy extends GoalTask {
	
}

class Goal {
	attr String ID;
	attr String name;
	val GoalMembers members;
	val GoalDependencies dependentGoals;
	val GoalArea[0..1] area;
	val GoalTask task;
	val Message[*] messages;
}

/* Mission definition */

class Mission {
	attr String name;
	val Robot[*] robots;
	val Server[*] servers;	
	val Goal[*] goals;
	val Obstacle[*] obstacles;
}

